#!/usr/bin/python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-2.0-only
#

import sys
import json
import signal
import socket
import syslog
import subprocess
from os import environ

debug = False
sock = None
addr_socket = '/var/run/addrwatcher.sock'
config = '/var/etc/mac2ip.json'

def update_mac(macs, mac, ip):
    global debug
    if mac in macs and macs[mac]['ip'] != ip:
        macs[mac]['ip'] = ip
        family = 'v6' if ':' in ip else 'v4'
        for ipset in macs[mac][family]:
            cmd = ['/usr/sbin/nft', 'add', 'element', 'inet', 'fw4', ipset, "{%s timeout 60s}" % ip]
            if debug:
                syslog.syslog(syslog.LOG_DEBUG, f'Execute: {cmd}')
            subprocess.run(cmd)

def handler(signum, frame):
    syslog.syslog('Reloading config')
    sock.close()
    run()

def run():
    global sock
    global config
    global addr_socket

    macs = {}
    with open(config, 'r') as fp:
        macs = json.load(fp)
        try:
            for mac in macs:
                macs[mac]['ip'] = ''
        except:
            macs = {"fake": {"ip": "", "v6": [], "v4": []}}

    # connect to addrwatcher socket and reads event
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(addr_socket)
    fs = sock.makefile(mode='r')
    for line in fs:
        try:
            # example: 1671787799 eth0 0 52:54:00:9d:3d:e5 192.168.100.177 ARP_REQ
           (ts, interface, vlan, mac, ip, event) = line.strip().split(" ")
           if debug:
               syslog.syslog(syslog.LOG_DEBUG, f"Event: {event} for {mac} -> {ip}")
           update_mac(macs, mac, ip)
        except:
            continue

syslog.openlog(facility=syslog.LOG_DAEMON)
syslog.syslog(f'Starting with config {config}')
signal.signal(signal.SIGUSR1, handler)
debug = environ.get("DEBUG", False)
run()
