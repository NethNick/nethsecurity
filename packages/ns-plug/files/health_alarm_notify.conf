# Configuration for alarm notifications

SEND_EMAIL="NO"
SEND_DYNATRACE="NO"
SEND_STACKPULSE="NO"
SEND_OPSGENIE="NO"
SEND_HANGOUTS="NO"
SEND_PUSHOVER="NO"
SEND_PUSHBULLET="NO"
SEND_TWILIO="NO"
SEND_MESSAGEBIRD="NO"
SEND_KAVENEGAR="NO"
SEND_TELEGRAM="NO"
SEND_SLACK="NO"
SEND_MSTEAMS="NO"
SEND_ROCKETCHAT="NO"
SEND_ALERTA="NO"
SEND_FLOCK="NO"
SEND_DISCORD="NO"
SEND_HIPCHAT="NO"
SEND_KAFKA="NO"
SEND_PD="NO"
SEND_FLEEP="NO"
SEND_IRC="NO"
SEND_SYSLOG="NO"
SEND_PROWL="NO"
SEND_AWSSNS="NO"
SEND_SMS="NO"
SEND_MATRIX="NO"

# Enable only syslog and custom notification
use_fqdn='YES'
SEND_SYSLOG="YES"
SYSLOG_FACILITY=''
DEFAULT_RECIPIENT_SYSLOG="sysadmin"

SEND_CUSTOM="YES"
DEFAULT_RECIPIENT_CUSTOM="sysadmin"

# Send alerts to my.nethesis.it or my.nethserver.com
custom_sender() {
    lk=$(uci -q get ns-plug.config.system_id)
    secret=$(uci -q get ns-plug.config.secret)
    url=$(uci -q get ns-plug.config.alerts_url)"alerts/store"
    alert_id=${name}
    payload='{"lk": "'$lk'", "alert_id": "'$alert_id'", "status": "'$status'"}'
    if [ "${status}" == "CRITICAL" ]; then
        status="FAILURE"
    elif [ "${status}" == "CLEAR" ]; then
        status="OK"
    fi

    # map to old alerts, when possible
    if [ "${chart}" == "disk_space._overlay" ] || [ "${chart}" == "disk_space._" ]; then
        alert_id="df:root:percent_bytes:free"
    elif [ "${chart}" == "disk_space._boot" ]; then
        alert_id="df:boot:percent_bytes:free"
    else
        alert_id="${name}:${chart}"
    fi

    # send only if the machine is registered
    if [ -z "${lk}" ] || [ -z "${secret}" ]; then
        return
    fi

    # send to remote server
    if [ "${status}" == "FAILURE" ] || [ "${status}" == "OK" ]; then
        /usr/bin/logger -t DEBUG "$payload"
        /usr/bin/curl -m 180 --retry 3 -L -s \
             --header "Authorization: token ${secret}"  --header "Content-Type: application/json" --header "Accept: application/json"  \
             --data-raw "${payload}" ${url}
    fi
}
