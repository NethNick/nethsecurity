#!/bin/sh /etc/rc.common
# shellcheck disable=SC2039  # "local" not defined in POSIX sh

START=99
STOP=10

USE_PROCD=1
PROG=/usr/bin/snort
MGR=/usr/bin/snort-mgr

validate_snort_section() {
	$MGR -q check || return 1
	uci_validate_section snort snort "${1}" \
		'enabled:bool:0' \
		'manual:bool:1' \
		'config_dir:string' \
		'interface:string'
}

update_bypass_set() {
	set_name=$1
	set_file="/var/ns-snort/${set_name}.conf"
	ips=$(uci -q get snort.nfq.${set_name})
	if [ -z "$ips" ]; then
		: > $set_file
	else
		echo -n "elements = {" > $set_file
		for ip in $ips; do
			echo -n " $ip," >> $set_file
		done
		echo " }" >> $set_file
    fi
}

start_service() {
	# If you wish to use application-managed PID file:
	# output.logdir, in the snort lua config, determines the PID file location.
	# Add '--create-pidfile' to the 'command', below.

        local enabled
	local manual
	local config_dir
	local interface

	# nethesis patch: config_dir sometimes seems empty, read it using external command
	if [ "$(uci -q get snort.snort.config_dir)" == "/var/ns-snort" ]; then
		cdir="$(uci -q get snort.snort.config_dir)"
		mkdir -p "${cdir}/rules"
		find /etc/snort -type f ! -name snort.rules -exec cp '{}' "${cdir}" \;
		update_bypass_set "bypass_src_v4"
		update_bypass_set "bypass_dst_v4"
		update_bypass_set "bypass_src_v6"
		update_bypass_set "bypass_dst_v6"
	fi

        validate_snort_section snort || {
                echo "Validation failed, try 'snort-mgr check'."
                return 1
        }

	[ "$enabled" = 0 ] && return

	procd_open_instance
	if [ "$manual" = 0 ]; then
		local config_file=$($MGR setup)
		procd_set_param command "$PROG" -q -c "${config_file}"
	else
		procd_set_param command $PROG -q -i "$interface" -c "${config_dir%/}/snort.lua" --tweaks local
		procd_set_param env SNORT_LUA_PATH="$config_dir"
		procd_set_param file $CONFIGFILE
	fi
	procd_set_param respawn
	procd_set_param stdout 0
	procd_set_param stderr 1
	procd_close_instance
}

stop_service()
{
	service_stop "$PROG"
	$MGR teardown
}

service_triggers()
{
	procd_add_reload_trigger "snort"
	procd_add_validation validate_snort_section
}
